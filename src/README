----------------------------------------------------------------------------
zCall: A Rare Variant Caller for Array-Based Genotyping
(Modified Autocall version)

For questions about implementing zCall or reporting problems with the code, please send an email to Jackie Goldstein (jigold@broadinstitute.org). For all other inquiries, please send an email to both Ben Neale (bneale@broadinstitute.org) and Jackie Goldstein (jigold@broadinstitute.org).

*** The Illumina provided Code was provided as-is and with no warranty as to performance and no warranty against it infringing any other party's intellectual property rights.

The paper describing zCall can be found here:
Goldstein JI, Crenshaw A, Carey J, Grant GB, Maguire J, Fromer M, O'Dushlaine C, Moran JL, Chambert K, Stevens C; Swedish Schizophrenia Consortium; ARRA Autism Sequencing Consortium, Sklar P, Hultman CM, Purcell S, McCarroll SA, Sullivan PF, Daly MJ, Neale BM. zCall: a rare variant caller for array-based genotyping: Genetics and population analysis. Bioinformatics. 2012 Oct 1;28(19):2543-2545. Epub 2012 Jul 27. PubMed PMID: 22843986.

Code in the src directory is based on zCall_Version1.3_AutoCall.zip, modified and extended for use in the WTSI-NPG genotyping pipeline (https://github.com/wtsi-npg/genotyping).  See the top-level zCall README file for additional details.

----------------------------------------------------------------------------


I. Overview

zCall is a set of Python scripts that are implemented on the command line. The inputs are Illumina .egt, .bpm.csv, and .gtc files. See examples/HumanExome-12v1_A.bpm.csv for an example .bpm.csv file. Maximum memory requirement for the Illumina Infinium Human Exome Chip (~ 250k probes) is 50 MB and is linear with the number of probes being used. It is assumed that the number, type, and order of SNPs in all files match and were produced from the same manifest file. zCall is meant to be a post-processing step after GenCall has been run. Therefore, we recommend QCing the original GenCall calls for HWE, call rate, and sample level information and only use zCalls in analyses for sites and samples that meet these QC filters. Sites can be removed from the output PED file using PLINK with the --exclude flag. (http://pngu.mgh.harvard.edu/~purcell/plink/)

The order in which the scripts should be called are as follows:

1. Calculate the means and standard deviations of the homozygote clusters in the minor axis dimension using findMeanSD.py

2. Calculate the best fit line between the means and standard deviations of X and Y using findBetas.r

3**. Find the thresholds t_x and t_y for each snp using findThresholds.py

4. Generate an output PLINK map file using makeMAPfile.py

5. Call each sample individually using zCall.py. This step can be parallelized using a cluster. The resulting output is one PLINK PED file per sample.

6. Combine all PED files to create one PED file for each project. (cat in unix can be used to vertically paste all of the PED files)

**To find the best z-score to use, repeat this step with different values of z [ex: 3-15] to obtain different sets of thresholds. Then recall each sample individually for common sites with each unique threshold file using sampleConcordance.py. The output of sampleConcordance.py is raw concordance counts for each sample that later need to be consolidated and the global concordance calculated for each threshold. The implementation of this step is dependent on each user's platform and directory structure. Therefore, only sampleConcordance.py is provided and the entire calibration of z-score process is not included.

----------------------------------------------------------------------------

II. Contents

1. findMeanSD.py

This script takes a .egt file as the input as specified by the -E flag at the command line and prints to standard output the means and standard deviations of the noise dimension for both homozygote clusters.

Example Usage:
python findMeanSD.py -E my.file.egt > my.mean.sd.txt

Example Output:
SNP     meanX   meanY   sdX     sdY     nMinorHom       nCommonHom
exm-IND10-102817747     0.0392347243215 0.0613322039676 0.010118493975  0.0126462436364 228     6476
exm-IND13-47565698      0.0111437905671 0.0350326370149 0.0206750497598 0.00733080579545        20      8217
exm-IND16-87694958      0.0592905368162 0.298133284703  0.0212582370535 0.0721205584317 471     5561
exm-IND17-3541025       0.0701893082753 0.0874438892934 0.0257727288208 0.0168673527018 704     4887


2. findBetas.r

This script takes as input the means and standard deviations calculated from findMeanSD.py and the output file path name to be written to. The third argument is either 0 or 1. 1 means to use weighted linear regression to account for small sample sizes where the weights are 1 / sqrt((1/nAA) + (1/nBB)). 0 is to use regular linear regression. The output is a text file with the beta coefficients and p-values for the following:
mean_Y ~ mean_X
mean_X ~ mean_Y
sd_Y ~ sd_X
sd_X ~ sd_Y

Example Usage:
Rscript findBetas.r <my.mean.sd.txt>  <my.betas.txt> 1

Example Output:
Model   Beta0   Beta1   pBeta0  pBeta1
meanY~meanX     0.0361008517335467      0.408826938991564       0       8.0063656846002e-209
meanX~meanY     0.0196130123363404      0.193920976874597       2.75794982838913e-297   8.00636568460522e-209
sdY~sdX 0.00849047606288656     0.220014889617904       0       1.77631451722414e-71
sdX~sdY 0.00570888678726261     0.124429781269892       0       1.77631451722667e-71


3. findThresholds.py

This script takes as input the beta coefficients from findBetas.r, an optional z-score threshold (default is 7), an optional minimum mean signal intensity required for assigning zCalls to a site (default is 0.2), and a .egt file. The output is a file with T_x and T_y specified for each SNP.

Example Usage:
python findThresholds.py -B my.betas.txt -E my.egt.file -Z 7 > my.output.threshold.txt

Example Output:
SNP     Tx      Ty
exm-IND1-200449980      0.0433116735063 0.106886681131
exm-IND1-201453487      0.043928957099  0.107555042777
exm-IND1-85310248       0.0667307870142 0.0517804626689
exm-IND10-102817747     0.110064182147  0.127157931765


4. zCall.py

This script takes as input the thresholds output file from findThresholds.py, a .gtc file for one sample, and a .bpm.csv file. The output is a PLINK PED file where the FID and IID are both the file name (without the .gtc extension). The default output alleles in the PED file are A/B. These can be changed to actual A,G,T,C alleles using the --update-alleles in PLINK.

Example Usage:
python zCall.py -B my.bpm.csv -G my.gtc -T my.thresholds.txt > my.new.ped


5. EGT.py

Class definition to parse EGT file. Attributes are as follows:

EGT.FileVersion
EGT.GcVersion
EGT.ClusterVersion
EGT.CallVersion
EGT.NormalizationVersion
EGT.DateCreated
EGT.Mode
EGT.Manifest
EGT.version
EGT.opa

EGT.numCodes -- python integer of the number of SNPs in file
EGT.names -- python list of the names of SNPs in file

# Python lists of the number of points for each SNP for each genotype
EGT.nAA 
EGT.nAB 
EGT.nBB

# Python lists of the means of X and Y for each Genotype
EGT.meanXAA
EGT.meanXAB
EGT.meanXBB
EGT.meanYAA
EGT.meanYAB
EGT.meanYBB

# Python lists of the standard deviations of X and Y for each Genotype
EGT.devXAA
EGT.devXAB
EGT.devXBB
EGT.devYAA
EGT.devYAB
EGT.devYBB


6. BPM.py

Class definition to parse a bpm.csv file. Attributes are as follows:

BPM.names - python list of the names of each SNP
BPM.chr - python list of the chromosomes of each SNP
BPM.pos - python list of the base pair positions of each SNP
BPM.normID - python list of the normalization IDs for each SNP
BPM.A - python list of the allele A is for each SNP [D,I,A,G,T,C]
BPM.B - python list of the allele B is for each SNP [D,I,A,G,T,C]


7. GTC.py

Class definition to parse GTC file. Input to class instance is a python list of the normalization ids for each SNP. Attributes are as follows:

GTC.BPMnormIDs - the normalization IDs for each SNP from the BPM file
GTC.sampleName 
GTC.samplePlate
GTC.sampleWell
GTC.clusterFile
GTC.snpManifest
GTC.imagingDate
GTC.autoCallDate
GTC.autoCallVersion
GTC.rawXintensities - python list of raw X intensities for each SNP
GTC.rawYintensities - python list of raw Y intensities for each SNP
GTC.normalizationTransformations - python dictionary of the xForms for each unique normalization ID. Values are a dictionary with keys of offset_x, offset_y, scale_x, scale_y, theta, shear
GTC.genotypes - python list of genotypes for each snp [ 0 = No Call, 1 = AA, 2 = AB, 3 = BB]
GTC.baseCalls - python list of base calls for each snp [ex: AG]
GTC.normXintensities - python list of normalized X intensities for each SNP
GTC.normYintensities - python list of normalized Y intensities for each SNP


8. makeMAPfile.py

Python script to make a PLINK MAP file from an Illumina .bpm file.

Example Usage:
python makeMAPfile.py -B my.bpm.csv > my.map


9. sampleConcordance.py

Python script to calibrate the z-score to use. Input is a threshold file from findThresholds.py, a .gtc file, a .egt file, and a .bpm.csv file. Output is one line of text with the sample name and counts for the following: 0_0, 0_1, 0_2, 0_3, 1_0, 1_1, 1_2, 1_3, 2_0, 2_1, 2_2, 2_3, 3_0, 3_1, 3_2, 3_3 where the first number is the genotype call from GenCall and the second number is the genotype call from zCall when recalling all points. 0 = No Call, 1 = Common Allele Homozygote, 2 = Heterozygote, 3 = Minor Allele Homozygote. Only autosomal, common sites (MAF > 5%) are included. Each homozygote cluster is also required to have at least 10 points in it.

Example Usage:
python sampleConcordance.py -B my.bpm.csv -T my.thresholds -G my.gtc -E my.egt > my.sample.name.txt

Example Output:
#SampleName      0_0     0_1     0_2     0_3     1_0     1_1     1_2     1_3     2_0     2_1     2_2     2_3     3_0     3_1     3_2     3_3
7532827010_R06C01       18      62      48      1       3       15331   15      0       22      107     8940    22      21      1       157     2452
