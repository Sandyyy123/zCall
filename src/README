zCall: A Rare Variant Caller for Array-Based Genotyping
(Extended version)

I. History

The zCall method was originally developed by Jackie Goldstein (jigold@broadinstitute.org) et al. and published in the following paper:
Goldstein JI, Crenshaw A, Carey J, Grant GB, Maguire J, Fromer M, O'Dushlaine C, Moran JL, Chambert K, Stevens C; Swedish Schizophrenia Consortium; ARRA Autism Sequencing Consortium, Sklar P, Hultman CM, Purcell S, McCarroll SA, Sullivan PF, Daly MJ, Neale BM. zCall: a rare variant caller for array-based genotyping: Genetics and population analysis. Bioinformatics. 2012 Oct 1;28(19):2543-2545. Epub 2012 Jul 27. PubMed PMID: 22843986.

zCall has been substantially extended by Iain Bancarz (ib5@sanger.ac.uk) for use in the WTSI Genotyping Pipeline (https://github.com/wtsi-npg/genotyping). The extension includes metrics for evaluation of the 'zscore' threshold parameter, implementation of zCall in a fully automated pipeline, and support for Plink binary output. 

II. Scope of documentation

This document contains a general overview of extended zCall.  HTML documentation for the individual Python modules in extended zCall is generated by the 'createDocs.py' script.

See the top-level README file for information on zCall as a whole, and README files in legacy .zip archives for information on the corresponding versions of the zCall software.

III. The zCall method

Applying zCall consists of four steps:
1. Generate candidate zscore threshold files
2. Evaluate metrics on the input data for each candidate threshold
3. Merge evaluation results and choose an optimal threshold for calling
4. Apply zCall using the chosen threshold to recall any 'no-calls' in the input data.

Input data consists of binary .GTC files, one for each sample.  Final genotype output is in Plink binary format (see http://pngu.mgh.harvard.edu/~purcell/plink/data.shtml).  Intermediate metadata files are written in JSON, a simple text-based format for storing data structures (see http://www.json.org/).

IV. Principal command-line scripts

Extended zCall supports two approaches to implementation: A self-contained script to run zCall from start to finish as a single process; and scripts to run individual steps of zCall independently, to enable parallelization.

The self-contained script is zCallComplete.py.

The individual scripts are prepareThresholds.py, evaluateThresholds.py, mergeEvaluation.py, and runZCall.py, respectively implementing steps 1-4 in section III.


V. Other scripts