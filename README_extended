zCall: A Rare Variant Caller for Array-Based Genotyping
(Extended version)


1. Overview

This document covers the extended version of zCall, located in the 'src' directory on github. For other implementations, see Section 8 (History).

2. Installation

Use GNU Make, with the target 'install'. For example, 'make install /home/jsmith/foo' will create a directory /home/jsmith/foo/zCall and install the relevant scripts and documentation. 

The etc/config.ini file should be edited to reflect the user's local computing environment. 

Software prerequisites are:
- Python 2.7.x
- R 2.x

3. The zCall method

Applying zCall consists of four steps:
  1. Generate candidate zscore threshold files
  2. Evaluate metrics on the input data for each candidate threshold
  3. Merge evaluation results and choose an optimal threshold for calling
  4. Apply zCall using the chosen threshold to recall any 'no-calls' in the input data.

4. Usage

Two approaches are supported:
  1. A self-contained script to run zCall from start to finish as a single process:  zCallComplete.py
  2. Scripts to run each step independently, enabling parallelization.  For steps 1-4 respectively: prepareThresholds.py, evaluateThresholds.py, mergeEvaluation.py, runZCall.py

Any of these scripts can be run with -h or --help for detailed help and usage information.

5. Other scripts and modules

- Modules containing relevant classes but not intended to be run as scripts: BPM.py, calibration.py, EGT.py, GTC.py, plink.py, utilities.py
- Original zCall scripts, with .py filename extension omitted to prevent automatic import: findMeanSD, findThresholds
- Additional command-line scripts, run with -h or --help for usage: createDocs.py, plinkEquivalenceTest.py
- R script used to find thresholds: findBetas.r

6. Data formats

Input data consists of binary .gtc files, one for each sample. In addition, zCall requires an appropriate .egt cluster file and .bpm.csv manifest file for the Illumina beadchip being processed.

Final genotype output is in Plink binary format (see http://pngu.mgh.harvard.edu/~purcell/plink/data.shtml).  Intermediate metadata files are written in JSON, a simple text-based format for storing data structures (see http://www.json.org/).

7. Further reading

Technical documentation of source code and tests is in the src/doc directory. HTML documentation for Python modules can be generated by running src/zcall/createDocs.py. The zCall method is discussed in the paper by JI Goldstein et al. (see Section 8 below).

8. History

The zCall method was originally developed by Jackie Goldstein (jigold@broadinstitute.org) et al. and published in the following paper:
Goldstein JI, Crenshaw A, Carey J, Grant GB, Maguire J, Fromer M, O'Dushlaine C, Moran JL, Chambert K, Stevens C; Swedish Schizophrenia Consortium; ARRA Autism Sequencing Consortium, Sklar P, Hultman CM, Purcell S, McCarroll SA, Sullivan PF, Daly MJ, Neale BM. zCall: a rare variant caller for array-based genotyping: Genetics and population analysis. Bioinformatics. 2012 Oct 1;28(19):2543-2545. Epub 2012 Jul 27. PubMed PMID: 22843986.

zCall has been substantially extended by Iain Bancarz (ib5@sanger.ac.uk), to allow incorporation into the WTSI Genotyping Pipeline (WTSIGP, see https://github.com/wtsi-npg/genotyping). The extension includes metrics for evaluation of the 'zscore' threshold parameter, automated implementation of the complete zcall workflow, and support for Plink binary output.  WTSIGP will support zCall as part of a fully automated pipeline workflow, with parallel processing on LSF.

The original implementation of zCall consisted of several self-contained versions for different input formats. These versions were committed to Github as .zip files. Extended zCall is based on 'zCall_Version1.3_AutoCall.zip'. Individual files in extended zCall are under version control on Github, and are located in the src directory.

Illumina provided code was provided as-is and with no warranty as to performance and no warranty against it infringing any other party's intellectual property rights.
